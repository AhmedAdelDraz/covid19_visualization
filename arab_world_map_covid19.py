# -*- coding: utf-8 -*-
"""world_map_covid19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CW6aNkxjl08sxIL51m9365l8Ft-XMa6Q
"""

import pandas as pd
import geopandas as gpd
import mapclassify
import PIL
import io
#import pysal

data = pd.read_csv('time_series_covid_19_confirmed.csv')
#data = data.drop(columns=['SNo','Province/State','Last Update','Deaths','Recovered'])

data = data.groupby('Country/Region').sum()
data = data.drop(columns=['Lat','Long'])

data_transposed = data.T

world = gpd.read_file('World_Map.shp')

world.replace('Viet Nam','Vietnam', inplace=True)
world.replace('Brunei Darussalam','Brunei', inplace=True)
world.replace('Cape Verde','Cabo Verde', inplace=True)
world.replace('Democratic Republic of the Congo','Congo (Kinshasa)', inplace=True)
world.replace('Congo','Congo (Brazzaville)', inplace=True)
world.replace('Czech Republic','Czechia', inplace=True)
world.replace('Swaziland','Eswatini', inplace=True)
world.replace('Iran (Islamic Republic of)','Iran', inplace=True)
world.replace('Korea, Republic of','Korea, South', inplace=True)
world.replace("Lao People's Democratic Republic",'Laos', inplace=True)
world.replace('Libyan Arab Jamahiriya','Libya', inplace=True)
world.replace('Republic of Moldova','Moldova', inplace=True)
world.replace('The former Yugoslav Republic of Macedonia','North Macedonia', inplace=True)
world.replace('Syrian Arab Republic','Syria', inplace=True)
world.replace('Taiwan','Taiwan*', inplace=True)
world.replace('United Republic of Tanzania','Tanzania', inplace=True)
world.replace('United States','US', inplace=True)
world.replace('Palestine','West Bank and Gaza', inplace=True)

arab_countries=['Egypt','Algeria','Sudan','Iraq','Morocco','Saudi Arabia','Yemen',\
                'Syria','Tunisia','Jordan','United Arab Emirates','Lebanon','Libya',\
                'West Bank and Gaza','Oman','Kuwait', 'Mauritania','Qatar', 'Bahrain','Djibouti',\
                'Comoros','Somalia','Western Sahara']
world = world[world['NAME'].isin(arab_countries)]
merge = world.join(data, on ='NAME',how='right')

images_frames = []
for dates in merge.columns.to_list()[2:]:
  ax = merge.plot(column = dates,
                  cmap='OrRd',
                  figsize=(14,14),
                  legend=True, 
                  scheme = 'user_defined',
                  classification_kwds = {'bins':[10, 20, 50, 100, 500, 1000, 5000, 10000, 500000]},
                  edgecolor='black',
                  linewidth = 0.4) 

  ax.set_title('Arab Countries Confirmed Coronavirus Cases: ' + dates,fontdict={'fontsize':18},pad=12.5)

  ax.set_axis_off()
  ax.get_legend().set_bbox_to_anchor((0.18,0.6))
  img = ax.get_figure()
  f = io.BytesIO()
  img.savefig(f,format = 'png',bbox_inches='tight')
  f.seek(0)
  images_frames.append(PIL.Image.open(f))


images_frames[0].save('dynamic_map.gif',format='GIF',
                      append_images = images_frames[1:],
                      save_all = True,
                      duration = 300,
                      loop = 1)
f.close()